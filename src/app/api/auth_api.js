import { apiRequest } from "./base_api";

/**
 * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å)
 * @param {object} userData - –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {object} - —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–æ–∫–µ–Ω–æ–º
 */
export function registerUser(userData) {
    console.log('üîÑ registerUser called with:', userData);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const requiredFields = ['full_name', 'email', 'password', 'country', 'phone'];
    const missingFields = requiredFields.filter(field => !userData[field]);
    
    if (missingFields.length > 0) {
        throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π API —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    const apiData = {
        full_name: userData.full_name,
        email: userData.email,
        password: userData.password,
        country: userData.country,
        phone: userData.phone,
        role_id: 2 // –í—Å–µ–≥–¥–∞ 2 –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π
    };
    
    console.log('üì§ Sending to API /register:', apiData);
    
    return apiRequest("/register", "POST", apiData)
        .then(response => {
            console.log('‚úÖ Register API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Register API error:', error);
            throw error;
        });
}

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é
 * @param {object} credentials - { email, password }
 * @returns {object} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–æ–∫–µ–Ω–æ–º
 */
export function loginUser(credentials) {
    console.log('üîÑ loginUser called with email:', credentials.email);
    
    if (!credentials.email || !credentials.password) {
        throw new Error('Email and password are required');
    }
    
    const loginData = {
        email: credentials.email,
        password: credentials.password
    };
    
    console.log('üì§ Sending to API /login:', { email: loginData.email, password: '***' });
    
    return apiRequest("/login", "POST", loginData)
        .then(response => {
            console.log('‚úÖ Login API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Login API error:', error);
            throw error;
        });
}

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É
 * @param {string} token - —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {object} - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
export function authWithToken(token) {
    console.log('üîÑ authWithToken called with token:', token ? 'exists' : 'null');
    
    if (!token) {
        throw new Error('Token is required');
    }
    
    const authData = { token };
    
    console.log('üì§ Sending to API /auth');
    
    return apiRequest("/auth", "POST", authData)
        .then(response => {
            console.log('‚úÖ Auth API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Auth API error:', error);
            throw error;
        });
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 * @param {number} userId
 * @returns {object}
 */
export function deleteUser(userId) {
    console.log('üîÑ deleteUser called with ID:', userId);
    
    if (!userId) {
        throw new Error('User ID is required');
    }
    
    const deleteData = { id: userId };
    
    console.log('üì§ Sending to API DELETE /users/delete:', deleteData);
    
    return apiRequest("/users/delete", "DELETE", deleteData)
        .then(response => {
            console.log('‚úÖ Delete user API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Delete user API error:', error);
            throw error;
        });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {number} userId
 * @param {string} newName
 * @returns {object}
 */
export function updateUserName(userId, newName) {
    console.log('üîÑ updateUserName called:', { userId, newName });
    
    if (!userId || !newName) {
        throw new Error('User ID and new name are required');
    }
    
    const updateData = {
        id: userId,
        full_name: newName
    };
    
    console.log('üì§ Sending to API PUT /users/update:', updateData);
    
    return apiRequest("/users/update", "PUT", updateData)
        .then(response => {
            console.log('‚úÖ Update user name API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Update user name API error:', error);
            throw error;
        });
}