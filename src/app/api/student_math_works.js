import { apiRequest } from "./base_api";

/**
 * –°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É
 * @param {object} data - { student_id, title, country, category_id }
 */
export function createMathWork(data) {
    console.log('üîÑ createMathWork called with:', data);
    
    const requiredFields = ['student_id', 'title', 'country', 'category_id'];
    const missingFields = requiredFields.filter(field => !data[field]);
    
    if (missingFields.length > 0) {
        throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
    }
    
    const apiData = {
        student_id: parseInt(data.student_id),
        title: data.title,
        country: data.country,
        category_id: parseInt(data.category_id)
    };
    
    console.log('üì§ Sending to API /mathworks:', apiData);
    
    return apiRequest("/mathworks", "POST", apiData)
        .then(response => {
            console.log('‚úÖ Create math work API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Create math work API error:', error);
            throw error;
        });
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É
 * @param {number|string} id 
 * @param {object} data - { student_id, title, country, category_id }
 */
export function updateMathWork(id, data) {
    console.log('üîÑ updateMathWork called with:', { id, data });
    
    const apiData = {
        student_id: parseInt(data.student_id),
        title: data.title,
        country: data.country,
        category_id: parseInt(data.category_id)
    };
    
    console.log('üì§ Sending to API PUT /mathworks/' + id, apiData);
    
    return apiRequest(`/mathworks/${id}`, "PUT", apiData)
        .then(response => {
            console.log('‚úÖ Update math work API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Update math work API error:', error);
            throw error;
        });
}

/**
 * –£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É
 * @param {number|string} id 
 */
export function deleteMathWork(id) {
    console.log('üîÑ deleteMathWork called with ID:', id);
    
    return apiRequest(`/mathworks/${id}`, "DELETE")
        .then(response => {
            console.log('‚úÖ Delete math work API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Delete math work API error:', error);
            throw error;
        });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–∞–±–æ—Ç—É –ø–æ ID
 * @param {number|string} id 
 */
export function getMathWorkById(id) {
    console.log('üîÑ getMathWorkById called with ID:', id);
    
    return apiRequest(`/mathworks/${id}`)
        .then(response => {
            console.log('‚úÖ Get math work API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Get math work API error:', error);
            throw error;
        });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {string} country 
 * @param {number} category_id 
 */
export function getMathWorksByCountryAndCategory(country, category_id) {
    console.log('üîÑ getMathWorksByCountryAndCategory called with:', { country, category_id });
    
    const apiData = {
        country: country,
        category_id: parseInt(category_id)
    };
    
    console.log('üì§ Sending to API /mathworks/filter:', apiData);
    
    return apiRequest("/mathworks/filter", "POST", apiData)
        .then(response => {
            console.log('‚úÖ Get math works by filter API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Get math works by filter API error:', error);
            throw error;
        });
}

/**
 * –ü–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞–ª–ª –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç–µ
 * @param {number|string} id 
 * @param {number} score 
 */
export function setMathWorkScore(id, score) {
    console.log('üîÑ setMathWorkScore called with:', { id, score });
    
    if (!id || score === undefined || score === null) {
        throw new Error('ID and score are required');
    }
    
    const apiData = {
        score: parseInt(score)
    };
    
    console.log('üì§ Sending to API PUT /mathworks/' + id + '/score:', apiData);
    
    return apiRequest(`/mathworks/${id}/score`, "PUT", apiData)
        .then(response => {
            console.log('‚úÖ Set math work score API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Set math work score API error:', error);
            throw error;
        });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç
 * @returns {Promise<{total_math_works: number}>}
 */
export function getMathWorksCount() {
    console.log('üîÑ getMathWorksCount called');

    return apiRequest("/mathworks/count")
        .then(response => {
            console.log('‚úÖ Get math works count API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Get math works count API error:', error);
            throw error;
        });
}