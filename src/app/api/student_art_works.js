import { API_URL } from "./base_api";

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã (—Å —Ñ–∞–π–ª–æ–º)
 * @param {FormData} formData - –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å –ø–æ–ª—è–º–∏: student_id, title, country, category_id, file
 */
export function uploadArtWork(formData) {
    console.log('üîÑ uploadArtWork called');
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData
    for (let [key, value] of formData.entries()) {
        if (value instanceof File) {
            console.log(`üì§ FormData ${key}:`, value.name, value.size, 'bytes');
        } else {
            console.log(`üì§ FormData ${key}:`, value);
        }
    }
    
    return fetch(`${API_URL}/artworks`, {
        method: "POST",
        body: formData, // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData
    }).then((response) => {
        console.log('üì° Upload response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`Upload failed: ${response.status} ${response.statusText}`);
        }
        
        return response.json();
    }).then((result) => {
        console.log('‚úÖ Upload art work API response:', result);
        return result;
    }).catch((error) => {
        console.error('‚ùå Upload art work API error:', error);
        throw error;
    });
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ ID
 * @param {number|string} id 
 */
export function deleteArtWork(id) {
    console.log('üîÑ deleteArtWork called with ID:', id);
    
    return fetch(`${API_URL}/artworks/${id}`, {
        method: "DELETE",
        headers: {
            "Content-Type": "application/json",
        }
    }).then((response) => {
        console.log('üì° Delete response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`Delete failed: ${response.status} ${response.statusText}`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
            return response.json();
        } else {
            return { success: true };
        }
    }).then((result) => {
        console.log('‚úÖ Delete art work API response:', result);
        return result;
    }).catch((error) => {
        console.error('‚ùå Delete art work API error:', error);
        throw error;
    });
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É
 * @param {number|string} id 
 * @param {object} data 
 */
export function updateArtWork(id, data) {
    console.log('üîÑ updateArtWork called with:', { id, data });
    
    return fetch(`${API_URL}/artworks/${id}`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(data)
    }).then((response) => {
        console.log('üì° Update response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`Update failed: ${response.status} ${response.statusText}`);
        }
        
        return response.json();
    }).then((result) => {
        console.log('‚úÖ Update art work API response:', result);
        return result;
    }).catch((error) => {
        console.error('‚ùå Update art work API error:', error);
        throw error;
    });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É –ø–æ ID
 * @param {number|string} id 
 */
export function getArtWorkById(id) {
    console.log('üîÑ getArtWorkById called with ID:', id);
    
    return fetch(`${API_URL}/artworks/${id}`, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        }
    }).then((response) => {
        console.log('üì° Get artwork response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`Get artwork failed: ${response.status} ${response.statusText}`);
        }
        
        return response.json();
    }).then((result) => {
        console.log('‚úÖ Get art work API response:', result);
        return result;
    }).catch((error) => {
        console.error('‚ùå Get art work API error:', error);
        throw error;
    });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 * @param {string} country 
 * @param {number} category_id 
 */
export function getArtWorksByCountryAndCategory(country, category_id) {
    console.log('üîÑ getArtWorksByCountryAndCategory called with:', { country, category_id });
    
    const apiData = {
        country: country,
        category_id: parseInt(category_id)
    };
    
    console.log('üì§ Sending to API /artworks/filter:', apiData);
    
    return fetch(`${API_URL}/artworks/filter`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(apiData)
    }).then((response) => {
        console.log('üì° Filter artworks response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`Filter artworks failed: ${response.status} ${response.statusText}`);
        }
        
        return response.json();
    }).then((result) => {
        console.log('‚úÖ Get art works by filter API response:', result);
        return result;
    }).catch((error) => {
        console.error('‚ùå Get art works by filter API error:', error);
        throw error;
    });
}

/**
 * –ü–æ—Å—Ç–∞–≤–∏—Ç—å –±–∞–ª–ª —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ
 * @param {number|string} id 
 * @param {number} score 
 */
export function setArtWorkScore(id, score) {
    console.log('üîÑ setArtWorkScore called with:', { id, score });
    
    if (!id || score === undefined || score === null) {
        throw new Error('ID and score are required');
    }
    
    const apiData = {
        score: parseInt(score)
    };
    
    console.log('üì§ Sending to API PUT /artworks/' + id + '/score:', apiData);
    
    return fetch(`${API_URL}/artworks/${id}/score`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(apiData)
    }).then((response) => {
        console.log('üì° Set artwork score response status:', response.status);
        
        if (!response.ok) {
            throw new Error(`Set artwork score failed: ${response.status} ${response.statusText}`);
        }
        
        return response.text().then(text => text ? JSON.parse(text) : {});
    }).then((result) => {
        console.log('‚úÖ Set art work score API response:', result);
        return result;
    }).catch((error) => {
        console.error('‚ùå Set art work score API error:', error);
        throw error;
    });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä—Ç-—Ä–∞–±–æ—Ç
 * @returns {Promise<{total_art_works: number}>}
 */
export function getArtWorksCount() {
    console.log('üîÑ getArtWorksCount called');

    return apiRequest("/artworks/count")
        .then(response => {
            console.log('‚úÖ Get art works count API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Get art works count API error:', error);
            throw error;
        });
}

// –í student_art_works.js - —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø–æ —Å—Ç—Ä–∞–Ω–µ
export async function getAllArtWorksByCountry(country) {
    try {
        const allArtworks = [];
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for (let categoryId = 1; categoryId <= 3; categoryId++) {
            try {
                const artworks = await getArtWorksByCountryAndCategory(country, categoryId);
                if (artworks && artworks.length > 0) {
                    allArtworks.push(...artworks);
                }
            } catch (error) {
                console.warn(`No artworks for category ${categoryId} in ${country}:`, error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            }
        }
        return allArtworks;
    } catch (error) {
        console.error('Error loading all artworks:', error);
        return [];
    }
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Å—Ç—Ä–∞–Ω–µ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º)
 * @param {string} country 
 */
export function getArtWorksByCountry(country) {
    console.log('üîÑ getArtWorksByCountry called with:', country);

    if (!country) {
        throw new Error('Country is required');
    }

    const apiData = { country };

    return fetch(`${API_URL}/artworks/country`, {
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        },
        body: JSON.stringify(apiData)
    }).then((response) => {
        console.log('üì° Get artworks by country response status:', response.status);

        if (!response.ok) {
            throw new Error(`Get artworks by country failed: ${response.status} ${response.statusText}`);
        }

        return response.json();
    }).then((result) => {
        console.log('‚úÖ Get artworks by country API response:', result);
        return result;
    }).catch((error) => {
        console.error('‚ùå Get artworks by country API error:', error);
        throw error;
    });
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
 * @param {number|string} id 
 * @param {FormData} formData - –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã (file –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
 */
export function updateArtWorkImage(id, formData) {
    console.log('üîÑ updateArtWorkImage called with ID:', id);

    // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ FormData
    for (let [key, value] of formData.entries()) {
        if (value instanceof File) {
            console.log(`üì§ FormData ${key}:`, value.name, value.size, 'bytes');
        } else {
            console.log(`üì§ FormData ${key}:`, value);
        }
    }

    return fetch(`${API_URL}/artworks/${id}/image`, {
        method: "PUT",
        body: formData // –ù–ï —Å—Ç–∞–≤–∏–º Content-Type
    }).then((response) => {
        console.log('üì° Update image response status:', response.status);

        if (!response.ok) {
            throw new Error(`Update image failed: ${response.status} ${response.statusText}`);
        }

        return response.json();
    }).then((result) => {
        console.log('‚úÖ Update artwork image API response:', result);
        return result;
    }).catch((error) => {
        console.error('‚ùå Update artwork image API error:', error);
        throw error;
    });
}
