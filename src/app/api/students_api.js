import { apiRequest } from "./base_api";

/**
 * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @param {object} student - –æ–±—ä–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @returns {object} - –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —Å—Ç—É–¥–µ–Ω—Ç —Å ID
 */
export function addStudent(student) {
    console.log('üîÑ addStudent called with:', student);
    
    const requiredFields = ['name', 'birth_date', 'school', 'phone', 'email', 'country', 'city', 'course_id', 'category_id'];
    const missingFields = requiredFields.filter(field => !student[field]);
    
    if (missingFields.length > 0) {
        throw new Error(`Missing required fields: ${missingFields.join(', ')}`);
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π API —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    const apiData = {
        name: student.name, // –ò–∑–º–µ–Ω–µ–Ω–æ —Å full_name –Ω–∞ name
        birth_date: student.birth_date,
        school: student.school,
        phone: student.phone,
        email: student.email,
        country: student.country,
        city: student.city,
        course_id: parseInt(student.course_id),
        category_id: parseInt(student.category_id)
    };
    
    console.log('üì§ Sending to API /students/add:', apiData);
    
    return apiRequest("/students/add", "POST", apiData)
        .then(response => {
            console.log('‚úÖ Add student API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Add student API error:', error);
            throw error;
        });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID
 * @param {number} studentId - ID —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @returns {object} - –æ–±—ä–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞
 */
export function getStudentById(studentId) {
    console.log('üîÑ getStudentById called with ID:', studentId);
    
    return apiRequest(`/students/${studentId}`)
        .then(response => {
            console.log('‚úÖ Get student API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Get student API error:', error);
            throw error;
        });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ
 * @param {string} country - —Å—Ç—Ä–∞–Ω–∞
 * @returns {object[]} - –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
 */
export function getStudentsByCountry(country) {
    console.log('üîÑ getStudentsByCountry called with country:', country);
    
    if (!country) {
        throw new Error('Country is required');
    }
    
    return apiRequest(`/students/country?country=${encodeURIComponent(country)}`)
        .then(response => {
            console.log('‚úÖ Get students by country API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Get students by country API error:', error);
            throw error;
        });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
 * @param {object} filters - { country, course_id, category_id }
 * @returns {object[]} - –º–∞—Å—Å–∏–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
 */
export function getStudentsByFilters(filters) {
    console.log('üîÑ getStudentsByFilters called with:', filters);
    
    const apiData = {
        country: filters.country,
        course_id: filters.course_id ? parseInt(filters.course_id) : undefined,
        category_id: filters.category_id ? parseInt(filters.category_id) : undefined
    };
    
    // –£–±–∏—Ä–∞–µ–º undefined –∑–Ω–∞—á–µ–Ω–∏—è
    Object.keys(apiData).forEach(key => {
        if (apiData[key] === undefined) {
            delete apiData[key];
        }
    });
    
    console.log('üì§ Sending to API /students/filter:', apiData);
    
    return apiRequest("/students/filter", "POST", apiData)
        .then(response => {
            console.log('‚úÖ Get students by filters API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Get students by filters API error:', error);
            throw error;
        });
}

/**
 * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞
 * @param {object} student - –æ–±—ä–µ–∫—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞ (–≤–∫–ª—é—á–∞—è ID)
 * @returns {object}
 */
export function updateStudent(student) {
    console.log('üîÑ updateStudent called with:', student);
    
    if (!student.id) {
        throw new Error('Student ID is required for update');
    }
    
    const apiData = {
        id: student.id,
        name: student.name,
        birth_date: student.birth_date,
        school: student.school,
        phone: student.phone,
        email: student.email,
        country: student.country,
        city: student.city,
        course_id: parseInt(student.course_id),
        category_id: parseInt(student.category_id)
    };
    
    console.log('üì§ Sending to API /students/update:', apiData);
    
    return apiRequest("/students/update", "PUT", apiData)
        .then(response => {
            console.log('‚úÖ Update student API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Update student API error:', error);
            throw error;
        });
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ ID
 * @param {number} studentId
 * @returns {object}
 */
export function deleteStudent(studentId) {
    console.log('üîÑ deleteStudent called with ID:', studentId);
    
    if (!studentId) {
        throw new Error('Student ID is required');
    }
    
    return apiRequest(`/students/delete/${studentId}`, "DELETE")
        .then(response => {
            console.log('‚úÖ Delete student API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Delete student API error:', error);
            throw error;
        });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
 * @returns {Promise<{total_students: number}>}
 */
export function getStudentsCount() {
    console.log('üîÑ getStudentsCount called');

    return apiRequest("/students/count")
        .then(response => {
            console.log('‚úÖ Get students count API response:', response);
            return response;
        })
        .catch(error => {
            console.error('‚ùå Get students count API error:', error);
            throw error;
        });
}